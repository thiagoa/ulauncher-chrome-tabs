#!/usr/bin/env python3

import struct
import sys
import logging
import threading
import nativemessaging
import json
from websocket_server import WebsocketServer

logging.basicConfig(filename='/tmp/ulauncher-host.log',
                    format='[%(asctime)s] %(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s',
                    datefmt="%H:%M:%S",
                    level=logging.DEBUG)


def on_ws_new_client(client, server):
    """ Function called on new client """
    logging.info("New client %s", client)


def on_ws_message_received(client, server, message):
    """ Callback executed when the websocket server receives a message """
    logging.info("New websocket message received %s", message)
    nativemessaging.send_message(nativemessaging.encode_message(message))


def read_native_messaging():
    """ Reads messages sent by Chrome Native API """
    while True:
        text = nativemessaging.get_message()
        logging.info('Received message from Chrome: %s', text)
        ws.send_message_to_all(json.dumps(text))


# Starts websocket server which Ulauncher will connect to.
# TODO we cant have logging in stdout, otherwise it will break Native messaging.
ws = WebsocketServer(10200, host='127.0.0.1',  loglevel=logging.FATAL)
ws.set_fn_message_received(on_ws_message_received)
ws.set_fn_new_client(on_ws_new_client)


def main():
    """ Listen to messages from the API """

    try:
        t = threading.Thread(target=ws.run_forever)
        t.daemon = True
        t.start()

        read_native_messaging()
    except KeyboardInterrupt as e:
        sys.exit(0)
    except SystemExit as e:
        pass
    except Exception as e:
        logging.error(e)
        sys.exit(1)


if __name__ == '__main__':
    main()
